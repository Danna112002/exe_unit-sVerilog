
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: ustawianie.sv
Parsing SystemVerilog input from `ustawianie.sv' to AST representation.
Generating RTLIL representation for module `\ustawianie'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \ustawianie_rtl

2.2. Analyzing design hierarchy..
Top module:  \ustawianie_rtl
Removing unused module `\ustawianie'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ustawianie_rtl

3.1.2. Analyzing design hierarchy..
Top module:  \ustawianie_rtl
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 34 switch rules as full_case in process $proc$ustawianie.sv:10$33 in module ustawianie_rtl.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ustawianie_rtl.$proc$ustawianie.sv:10$33'.
     1/69: $2\o_error[0:0]
     2/69: $1\o_error[0:0]
     3/69: $32\tymczasowy_rejestr[31:31]
     4/69: $31\tymczasowy_rejestr[30:30]
     5/69: $30\tymczasowy_rejestr[29:29]
     6/69: $29\tymczasowy_rejestr[28:28]
     7/69: $28\tymczasowy_rejestr[27:27]
     8/69: $27\tymczasowy_rejestr[26:26]
     9/69: $26\tymczasowy_rejestr[25:25]
    10/69: $25\tymczasowy_rejestr[24:24]
    11/69: $24\tymczasowy_rejestr[23:23]
    12/69: $23\tymczasowy_rejestr[22:22]
    13/69: $22\tymczasowy_rejestr[21:21]
    14/69: $21\tymczasowy_rejestr[20:20]
    15/69: $20\tymczasowy_rejestr[19:19]
    16/69: $19\tymczasowy_rejestr[18:18]
    17/69: $18\tymczasowy_rejestr[17:17]
    18/69: $17\tymczasowy_rejestr[16:16]
    19/69: $16\tymczasowy_rejestr[15:15]
    20/69: $15\tymczasowy_rejestr[14:14]
    21/69: $14\tymczasowy_rejestr[13:13]
    22/69: $13\tymczasowy_rejestr[12:12]
    23/69: $12\tymczasowy_rejestr[11:11]
    24/69: $11\tymczasowy_rejestr[10:10]
    25/69: $10\tymczasowy_rejestr[9:9]
    26/69: $9\tymczasowy_rejestr[8:8]
    27/69: $8\tymczasowy_rejestr[7:7]
    28/69: $7\tymczasowy_rejestr[6:6]
    29/69: $6\tymczasowy_rejestr[5:5]
    30/69: $5\tymczasowy_rejestr[4:4]
    31/69: $4\tymczasowy_rejestr[3:3]
    32/69: $3\tymczasowy_rejestr[2:2]
    33/69: $2\tymczasowy_rejestr[1:1]
    34/69: $1\tymczasowy_rejestr[0:0]
    35/69: $0\o_result[31:0]
    36/69: $0\o_error[0:0]
    37/69: $0\n[31:0]
    38/69: $0\tymczasowy_rejestr[31:0] [31]
    39/69: $0\tymczasowy_rejestr[31:0] [30]
    40/69: $0\tymczasowy_rejestr[31:0] [29]
    41/69: $0\tymczasowy_rejestr[31:0] [28]
    42/69: $0\tymczasowy_rejestr[31:0] [27]
    43/69: $0\tymczasowy_rejestr[31:0] [26]
    44/69: $0\tymczasowy_rejestr[31:0] [25]
    45/69: $0\tymczasowy_rejestr[31:0] [24]
    46/69: $0\tymczasowy_rejestr[31:0] [23]
    47/69: $0\tymczasowy_rejestr[31:0] [22]
    48/69: $0\tymczasowy_rejestr[31:0] [21]
    49/69: $0\tymczasowy_rejestr[31:0] [20]
    50/69: $0\tymczasowy_rejestr[31:0] [19]
    51/69: $0\tymczasowy_rejestr[31:0] [18]
    52/69: $0\tymczasowy_rejestr[31:0] [17]
    53/69: $0\tymczasowy_rejestr[31:0] [16]
    54/69: $0\tymczasowy_rejestr[31:0] [15]
    55/69: $0\tymczasowy_rejestr[31:0] [14]
    56/69: $0\tymczasowy_rejestr[31:0] [13]
    57/69: $0\tymczasowy_rejestr[31:0] [12]
    58/69: $0\tymczasowy_rejestr[31:0] [11]
    59/69: $0\tymczasowy_rejestr[31:0] [10]
    60/69: $0\tymczasowy_rejestr[31:0] [9]
    61/69: $0\tymczasowy_rejestr[31:0] [8]
    62/69: $0\tymczasowy_rejestr[31:0] [7]
    63/69: $0\tymczasowy_rejestr[31:0] [6]
    64/69: $0\tymczasowy_rejestr[31:0] [5]
    65/69: $0\tymczasowy_rejestr[31:0] [4]
    66/69: $0\tymczasowy_rejestr[31:0] [3]
    67/69: $0\tymczasowy_rejestr[31:0] [2]
    68/69: $0\tymczasowy_rejestr[31:0] [1]
    69/69: $0\tymczasowy_rejestr[31:0] [0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ustawianie_rtl.\n' from process `\ustawianie_rtl.$proc$ustawianie.sv:10$33'.
No latch inferred for signal `\ustawianie_rtl.\o_error' from process `\ustawianie_rtl.$proc$ustawianie.sv:10$33'.
No latch inferred for signal `\ustawianie_rtl.\tymczasowy_rejestr' from process `\ustawianie_rtl.$proc$ustawianie.sv:10$33'.
No latch inferred for signal `\ustawianie_rtl.\o_result' from process `\ustawianie_rtl.$proc$ustawianie.sv:10$33'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 34 empty switches in `\ustawianie_rtl.$proc$ustawianie.sv:10$33'.
Removing empty process `ustawianie_rtl.$proc$ustawianie.sv:10$33'.
Cleaned up 34 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.
<suppressed ~2 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..
Removed 0 unused cells and 107 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module ustawianie_rtl..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawianie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawianie_rtl.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$35 ($eq).
Removed top 30 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$36 ($eq).
Removed top 30 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$37 ($eq).
Removed top 29 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$38 ($eq).
Removed top 29 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$39 ($eq).
Removed top 29 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$40 ($eq).
Removed top 29 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$41 ($eq).
Removed top 28 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$42 ($eq).
Removed top 28 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$43 ($eq).
Removed top 28 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$44 ($eq).
Removed top 28 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$45 ($eq).
Removed top 28 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$46 ($eq).
Removed top 28 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$47 ($eq).
Removed top 28 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$48 ($eq).
Removed top 28 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$49 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$50 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$51 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$52 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$53 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$54 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$55 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$56 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$57 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$58 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$59 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$60 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$61 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$62 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$63 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$64 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$eq$ustawianie.sv:14$65 ($eq).
Removed top 27 bits (of 32) from port B of cell ustawianie_rtl.$gt$ustawianie.sv:21$67 ($gt).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~516 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ustawianie_rtl:
  creating $alu model for $gt$ustawianie.sv:21$67 ($gt): new $alu
  creating $alu model for $eq$ustawianie.sv:14$65 ($eq): merged with $gt$ustawianie.sv:21$67.
  creating $alu cell for $gt$ustawianie.sv:21$67, $eq$ustawianie.sv:14$65: $auto$alumacc.cc:474:replace_alu$172
  created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.
<suppressed ~1 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawianie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawianie_rtl.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$177: { $auto$alumacc.cc:490:replace_alu$173 [0] $auto$alumacc.cc:490:replace_alu$173 [1] $auto$alumacc.cc:490:replace_alu$173 [2] $auto$alumacc.cc:490:replace_alu$173 [3] $auto$alumacc.cc:490:replace_alu$173 [4] $auto$alumacc.cc:490:replace_alu$173 [5] $auto$alumacc.cc:490:replace_alu$173 [6] $auto$alumacc.cc:490:replace_alu$173 [7] $auto$alumacc.cc:490:replace_alu$173 [8] $auto$alumacc.cc:490:replace_alu$173 [9] $auto$alumacc.cc:490:replace_alu$173 [10] $auto$alumacc.cc:490:replace_alu$173 [11] $auto$alumacc.cc:490:replace_alu$173 [12] $auto$alumacc.cc:490:replace_alu$173 [13] $auto$alumacc.cc:490:replace_alu$173 [14] $auto$alumacc.cc:490:replace_alu$173 [15] $auto$alumacc.cc:490:replace_alu$173 [16] $auto$alumacc.cc:490:replace_alu$173 [17] $auto$alumacc.cc:490:replace_alu$173 [18] $auto$alumacc.cc:490:replace_alu$173 [19] $auto$alumacc.cc:490:replace_alu$173 [20] $auto$alumacc.cc:490:replace_alu$173 [21] $auto$alumacc.cc:490:replace_alu$173 [22] $auto$alumacc.cc:490:replace_alu$173 [23] $auto$alumacc.cc:490:replace_alu$173 [24] $auto$alumacc.cc:490:replace_alu$173 [25] $auto$alumacc.cc:490:replace_alu$173 [26] $auto$alumacc.cc:490:replace_alu$173 [27] $auto$alumacc.cc:490:replace_alu$173 [28] $auto$alumacc.cc:490:replace_alu$173 [29] $auto$alumacc.cc:490:replace_alu$173 [30] $auto$alumacc.cc:490:replace_alu$173 [31] }
  Optimizing cells in module \ustawianie_rtl.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawianie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawianie_rtl.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.
<suppressed ~33 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..
Removed 0 unused cells and 33 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ustawianie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ustawianie_rtl.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~381 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.
<suppressed ~1051 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
<suppressed ~2739 debug messages>
Removed a total of 913 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..
Removed 61 unused cells and 225 unused wires.
<suppressed ~62 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\ustawianie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 294 gates and 359 wires to a netlist network with 64 inputs and 33 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:       32
ABC RESULTS:              OAI3 cells:       33
ABC RESULTS:                OR cells:      107
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:        internal signals:      262
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ustawianie_rtl.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ustawianie_rtl'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..
Removed 0 unused cells and 231 unused wires.
<suppressed ~2 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \ustawianie_rtl

3.25.2. Analyzing design hierarchy..
Top module:  \ustawianie_rtl
Removed 0 unused modules.

3.26. Printing statistics.

=== ustawianie_rtl ===

   Number of wires:                158
   Number of wire bits:            282
   Number of public wires:           5
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                186
     $_ANDNOT_                       2
     $_AND_                          1
     $_AOI3_                         1
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                         32
     $_OAI3_                        33
     $_ORNOT_                        6
     $_OR_                         107

3.27. Executing CHECK pass (checking for obvious problems).
checking module ustawianie_rtl..
found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\ustawianie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 186 gates and 250 wires to a netlist network with 64 inputs and 33 outputs.

4.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       64
ABC RESULTS:               NOT cells:       11
ABC RESULTS:                OR cells:       56
ABC RESULTS:        internal signals:      153
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ustawianie_rtl..
Removed 0 unused cells and 250 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.
Dumping module `\ustawianie_rtl'.

7. Printing statistics.
