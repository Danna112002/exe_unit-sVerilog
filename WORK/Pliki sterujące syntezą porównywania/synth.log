
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: Porownywanie.sv
Parsing SystemVerilog input from `Porownywanie.sv' to AST representation.
Generating RTLIL representation for module `\Porownywanie'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \Porownywanie_rtl

2.2. Analyzing design hierarchy..
Top module:  \Porownywanie_rtl
Removing unused module `\Porownywanie'.
Removed 1 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \Porownywanie_rtl

3.1.2. Analyzing design hierarchy..
Top module:  \Porownywanie_rtl
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$Porownywanie.sv:6$1 in module Porownywanie_rtl.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\Porownywanie_rtl.$proc$Porownywanie.sv:6$1'.
     1/2: $1\o_result[0:0]
     2/2: $0\o_result[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Porownywanie_rtl.\o_result' from process `\Porownywanie_rtl.$proc$Porownywanie.sv:6$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\Porownywanie_rtl.$proc$Porownywanie.sv:6$1'.
Removing empty process `Porownywanie_rtl.$proc$Porownywanie.sv:6$1'.
Cleaned up 1 empty switch.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module Porownywanie_rtl..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Porownywanie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Porownywanie_rtl.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~20 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Porownywanie_rtl:
  creating $alu model for $le$Porownywanie.sv:9$2 ($le): new $alu
  creating $alu cell for $le$Porownywanie.sv:9$2: $auto$alumacc.cc:474:replace_alu$7
  created 1 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Porownywanie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Porownywanie_rtl.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$18: { $auto$rtlil.cc:1832:Not$17 $auto$rtlil.cc:1835:ReduceAnd$11 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$10: { $auto$alumacc.cc:490:replace_alu$8 [0] $auto$alumacc.cc:490:replace_alu$8 [1] $auto$alumacc.cc:490:replace_alu$8 [2] $auto$alumacc.cc:490:replace_alu$8 [3] $auto$alumacc.cc:490:replace_alu$8 [4] $auto$alumacc.cc:490:replace_alu$8 [5] $auto$alumacc.cc:490:replace_alu$8 [6] $auto$alumacc.cc:490:replace_alu$8 [7] $auto$alumacc.cc:490:replace_alu$8 [8] $auto$alumacc.cc:490:replace_alu$8 [9] $auto$alumacc.cc:490:replace_alu$8 [10] $auto$alumacc.cc:490:replace_alu$8 [11] $auto$alumacc.cc:490:replace_alu$8 [12] $auto$alumacc.cc:490:replace_alu$8 [13] $auto$alumacc.cc:490:replace_alu$8 [14] $auto$alumacc.cc:490:replace_alu$8 [15] $auto$alumacc.cc:490:replace_alu$8 [16] $auto$alumacc.cc:490:replace_alu$8 [17] $auto$alumacc.cc:490:replace_alu$8 [18] $auto$alumacc.cc:490:replace_alu$8 [19] $auto$alumacc.cc:490:replace_alu$8 [20] $auto$alumacc.cc:490:replace_alu$8 [21] $auto$alumacc.cc:490:replace_alu$8 [22] $auto$alumacc.cc:490:replace_alu$8 [23] $auto$alumacc.cc:490:replace_alu$8 [24] $auto$alumacc.cc:490:replace_alu$8 [25] $auto$alumacc.cc:490:replace_alu$8 [26] $auto$alumacc.cc:490:replace_alu$8 [27] $auto$alumacc.cc:490:replace_alu$8 [28] $auto$alumacc.cc:490:replace_alu$8 [29] $auto$alumacc.cc:490:replace_alu$8 [30] $auto$alumacc.cc:490:replace_alu$8 [31] }
  Optimizing cells in module \Porownywanie_rtl.
Performed a total of 2 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Porownywanie_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Porownywanie_rtl.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.
<suppressed ~1 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Porownywanie_rtl..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Porownywanie_rtl.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~352 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.
<suppressed ~34 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
<suppressed ~78 debug messages>
Removed a total of 26 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..
Removed 84 unused cells and 78 unused wires.
<suppressed ~85 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\Porownywanie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 194 gates and 258 wires to a netlist network with 64 inputs and 1 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:              AOI3 cells:       10
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:       17
ABC RESULTS:              OAI3 cells:       21
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:       34
ABC RESULTS:               XOR cells:       32
ABC RESULTS:        internal signals:      193
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:        1
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Porownywanie_rtl.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Porownywanie_rtl'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..
Removed 0 unused cells and 135 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \Porownywanie_rtl

3.25.2. Analyzing design hierarchy..
Top module:  \Porownywanie_rtl
Removed 0 unused modules.

3.26. Printing statistics.

=== Porownywanie_rtl ===

   Number of wires:                129
   Number of wire bits:            191
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                127
     $_ANDNOT_                       2
     $_AND_                          1
     $_AOI3_                        10
     $_NAND_                         6
     $_NOR_                         17
     $_OAI3_                        21
     $_ORNOT_                       34
     $_OR_                           4
     $_XOR_                         32

3.27. Executing CHECK pass (checking for obvious problems).
checking module Porownywanie_rtl..
found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `\Porownywanie_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 127 gates and 191 wires to a netlist network with 64 inputs and 1 outputs.

4.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       87
ABC RESULTS:               NOT cells:       45
ABC RESULTS:                OR cells:       69
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      126
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:        1
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Porownywanie_rtl..
Removed 0 unused cells and 191 unused wires.
<suppressed ~1 debug messages>

6. Executing Verilog backend.
Dumping module `\Porownywanie_rtl'.

7. Printing statistics.
