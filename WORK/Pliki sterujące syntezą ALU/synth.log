
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: exe_unit_w48.sv
Parsing SystemVerilog input from `exe_unit_w48.sv' to AST representation.
Generating RTLIL representation for module `\Dodawanie'.
Generating RTLIL representation for module `\Porownywanie'.
Generating RTLIL representation for module `\ustawianie'.
Generating RTLIL representation for module `\konwersja'.
Generating RTLIL representation for module `\exe_unit_w48'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \exe_unit_w48_rtl
Used module:     \Dodawanie
Used module:     \Porownywanie
Used module:     \ustawianie
Used module:     \konwersja

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\Dodawanie'.
Parameter \WIDTH = 32
Generating RTLIL representation for module `$paramod\Dodawanie\WIDTH=32'.

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\Porownywanie'.
Parameter \BITS = 32
Generating RTLIL representation for module `$paramod\Porownywanie\BITS=32'.

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\ustawianie'.
Parameter \BITS = 32
Generating RTLIL representation for module `$paramod\ustawianie\BITS=32'.

2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\konwersja'.
Parameter \WIDTH = 32
Generating RTLIL representation for module `$paramod\konwersja\WIDTH=32'.

2.6. Analyzing design hierarchy..
Top module:  \exe_unit_w48_rtl
Used module:     $paramod\Dodawanie\WIDTH=32
Used module:     $paramod\Porownywanie\BITS=32
Used module:     $paramod\ustawianie\BITS=32
Used module:     $paramod\konwersja\WIDTH=32

2.7. Analyzing design hierarchy..
Top module:  \exe_unit_w48_rtl
Used module:     $paramod\Dodawanie\WIDTH=32
Used module:     $paramod\Porownywanie\BITS=32
Used module:     $paramod\ustawianie\BITS=32
Used module:     $paramod\konwersja\WIDTH=32
Removing unused module `\exe_unit_w48'.
Removing unused module `\konwersja'.
Removing unused module `\ustawianie'.
Removing unused module `\Porownywanie'.
Removing unused module `\Dodawanie'.
Removed 5 unused modules.
Warning: Resizing cell port exe_unit_w48_rtl.Porownywanie.o_result from 32 bits to 1 bits.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \exe_unit_w48_rtl
Used module:     $paramod\Dodawanie\WIDTH=32
Used module:     $paramod\Porownywanie\BITS=32
Used module:     $paramod\ustawianie\BITS=32
Used module:     $paramod\konwersja\WIDTH=32

3.1.2. Analyzing design hierarchy..
Top module:  \exe_unit_w48_rtl
Used module:     $paramod\Dodawanie\WIDTH=32
Used module:     $paramod\Porownywanie\BITS=32
Used module:     $paramod\ustawianie\BITS=32
Used module:     $paramod\konwersja\WIDTH=32
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$konwersja.sv:6$163 in module $paramod\konwersja\WIDTH=32.
Marked 34 switch rules as full_case in process $proc$ustawianie.sv:10$127 in module $paramod\ustawianie\BITS=32.
Marked 1 switch rules as full_case in process $proc$Porownywanie.sv:6$93 in module $paramod\Porownywanie\BITS=32.
Removed 1 dead cases from process $proc$exe_unit_w48.sv:39$81 in module exe_unit_w48_rtl.
Marked 5 switch rules as full_case in process $proc$exe_unit_w48.sv:39$81 in module exe_unit_w48_rtl.
Marked 1 switch rules as full_case in process $proc$exe_unit_w48.sv:74$89 in module exe_unit_w48_rtl.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \i_rst in `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:74$89'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\konwersja\WIDTH=32.$proc$konwersja.sv:6$163'.
     1/5: $2\o_error[0:0]
     2/5: $1\o_error[0:0]
     3/5: $1\o_result[31:0]
     4/5: $0\o_error[0:0]
     5/5: $0\o_result[31:0]
Creating decoders for process `$paramod\ustawianie\BITS=32.$proc$ustawianie.sv:10$127'.
     1/69: $2\o_error[0:0]
     2/69: $1\o_error[0:0]
     3/69: $32\tymczasowy_rejestr[31:31]
     4/69: $31\tymczasowy_rejestr[30:30]
     5/69: $30\tymczasowy_rejestr[29:29]
     6/69: $29\tymczasowy_rejestr[28:28]
     7/69: $28\tymczasowy_rejestr[27:27]
     8/69: $27\tymczasowy_rejestr[26:26]
     9/69: $26\tymczasowy_rejestr[25:25]
    10/69: $25\tymczasowy_rejestr[24:24]
    11/69: $24\tymczasowy_rejestr[23:23]
    12/69: $23\tymczasowy_rejestr[22:22]
    13/69: $22\tymczasowy_rejestr[21:21]
    14/69: $21\tymczasowy_rejestr[20:20]
    15/69: $20\tymczasowy_rejestr[19:19]
    16/69: $19\tymczasowy_rejestr[18:18]
    17/69: $18\tymczasowy_rejestr[17:17]
    18/69: $17\tymczasowy_rejestr[16:16]
    19/69: $16\tymczasowy_rejestr[15:15]
    20/69: $15\tymczasowy_rejestr[14:14]
    21/69: $14\tymczasowy_rejestr[13:13]
    22/69: $13\tymczasowy_rejestr[12:12]
    23/69: $12\tymczasowy_rejestr[11:11]
    24/69: $11\tymczasowy_rejestr[10:10]
    25/69: $10\tymczasowy_rejestr[9:9]
    26/69: $9\tymczasowy_rejestr[8:8]
    27/69: $8\tymczasowy_rejestr[7:7]
    28/69: $7\tymczasowy_rejestr[6:6]
    29/69: $6\tymczasowy_rejestr[5:5]
    30/69: $5\tymczasowy_rejestr[4:4]
    31/69: $4\tymczasowy_rejestr[3:3]
    32/69: $3\tymczasowy_rejestr[2:2]
    33/69: $2\tymczasowy_rejestr[1:1]
    34/69: $1\tymczasowy_rejestr[0:0]
    35/69: $0\o_result[31:0]
    36/69: $0\o_error[0:0]
    37/69: $0\n[31:0]
    38/69: $0\tymczasowy_rejestr[31:0] [31]
    39/69: $0\tymczasowy_rejestr[31:0] [30]
    40/69: $0\tymczasowy_rejestr[31:0] [29]
    41/69: $0\tymczasowy_rejestr[31:0] [28]
    42/69: $0\tymczasowy_rejestr[31:0] [27]
    43/69: $0\tymczasowy_rejestr[31:0] [26]
    44/69: $0\tymczasowy_rejestr[31:0] [25]
    45/69: $0\tymczasowy_rejestr[31:0] [24]
    46/69: $0\tymczasowy_rejestr[31:0] [23]
    47/69: $0\tymczasowy_rejestr[31:0] [22]
    48/69: $0\tymczasowy_rejestr[31:0] [21]
    49/69: $0\tymczasowy_rejestr[31:0] [20]
    50/69: $0\tymczasowy_rejestr[31:0] [19]
    51/69: $0\tymczasowy_rejestr[31:0] [18]
    52/69: $0\tymczasowy_rejestr[31:0] [17]
    53/69: $0\tymczasowy_rejestr[31:0] [16]
    54/69: $0\tymczasowy_rejestr[31:0] [15]
    55/69: $0\tymczasowy_rejestr[31:0] [14]
    56/69: $0\tymczasowy_rejestr[31:0] [13]
    57/69: $0\tymczasowy_rejestr[31:0] [12]
    58/69: $0\tymczasowy_rejestr[31:0] [11]
    59/69: $0\tymczasowy_rejestr[31:0] [10]
    60/69: $0\tymczasowy_rejestr[31:0] [9]
    61/69: $0\tymczasowy_rejestr[31:0] [8]
    62/69: $0\tymczasowy_rejestr[31:0] [7]
    63/69: $0\tymczasowy_rejestr[31:0] [6]
    64/69: $0\tymczasowy_rejestr[31:0] [5]
    65/69: $0\tymczasowy_rejestr[31:0] [4]
    66/69: $0\tymczasowy_rejestr[31:0] [3]
    67/69: $0\tymczasowy_rejestr[31:0] [2]
    68/69: $0\tymczasowy_rejestr[31:0] [1]
    69/69: $0\tymczasowy_rejestr[31:0] [0]
Creating decoders for process `$paramod\Porownywanie\BITS=32.$proc$Porownywanie.sv:6$93'.
     1/2: $1\o_result[0:0]
     2/2: $0\o_result[0:0]
Creating decoders for process `$paramod\Dodawanie\WIDTH=32.$proc$Dodawanie.sv:8$91'.
     1/1: { $0\o_carry[0:0] $0\o_result[31:0] }
Creating decoders for process `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:39$81'.
     1/10: $1\flaga_even[0:0]
     2/10: $1\flaga_negative[0:0]
     3/10: $1\flaga_zero[0:0]
     4/10: $1\flaga_error[0:0]
     5/10: $1\wynik[31:0]
     6/10: $0\flaga_even[0:0]
     7/10: $0\flaga_negative[0:0]
     8/10: $0\flaga_zero[0:0]
     9/10: $0\flaga_error[0:0]
    10/10: $0\wynik[31:0]
Creating decoders for process `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:74$89'.
     1/2: $0\o_status[3:0]
     2/2: $0\o_result[31:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\konwersja\WIDTH=32.\o_result' from process `$paramod\konwersja\WIDTH=32.$proc$konwersja.sv:6$163'.
No latch inferred for signal `$paramod\konwersja\WIDTH=32.\o_error' from process `$paramod\konwersja\WIDTH=32.$proc$konwersja.sv:6$163'.
No latch inferred for signal `$paramod\ustawianie\BITS=32.\o_result' from process `$paramod\ustawianie\BITS=32.$proc$ustawianie.sv:10$127'.
No latch inferred for signal `$paramod\ustawianie\BITS=32.\n' from process `$paramod\ustawianie\BITS=32.$proc$ustawianie.sv:10$127'.
No latch inferred for signal `$paramod\ustawianie\BITS=32.\tymczasowy_rejestr' from process `$paramod\ustawianie\BITS=32.$proc$ustawianie.sv:10$127'.
No latch inferred for signal `$paramod\ustawianie\BITS=32.\o_error' from process `$paramod\ustawianie\BITS=32.$proc$ustawianie.sv:10$127'.
No latch inferred for signal `$paramod\Porownywanie\BITS=32.\o_result' from process `$paramod\Porownywanie\BITS=32.$proc$Porownywanie.sv:6$93'.
No latch inferred for signal `$paramod\Dodawanie\WIDTH=32.\o_result' from process `$paramod\Dodawanie\WIDTH=32.$proc$Dodawanie.sv:8$91'.
No latch inferred for signal `$paramod\Dodawanie\WIDTH=32.\o_carry' from process `$paramod\Dodawanie\WIDTH=32.$proc$Dodawanie.sv:8$91'.
No latch inferred for signal `\exe_unit_w48_rtl.\wynik' from process `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:39$81'.
No latch inferred for signal `\exe_unit_w48_rtl.\flaga_error' from process `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:39$81'.
No latch inferred for signal `\exe_unit_w48_rtl.\flaga_zero' from process `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:39$81'.
No latch inferred for signal `\exe_unit_w48_rtl.\flaga_negative' from process `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:39$81'.
No latch inferred for signal `\exe_unit_w48_rtl.\flaga_even' from process `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:39$81'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\exe_unit_w48_rtl.\o_result' using process `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:74$89'.
  created $adff cell `$procdff$305' with positive edge clock and positive level reset.
Creating register for signal `\exe_unit_w48_rtl.\o_status' using process `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:74$89'.
  created $adff cell `$procdff$306' with positive edge clock and positive level reset.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `$paramod\konwersja\WIDTH=32.$proc$konwersja.sv:6$163'.
Removing empty process `$paramod\konwersja\WIDTH=32.$proc$konwersja.sv:6$163'.
Found and cleaned up 34 empty switches in `$paramod\ustawianie\BITS=32.$proc$ustawianie.sv:10$127'.
Removing empty process `$paramod\ustawianie\BITS=32.$proc$ustawianie.sv:10$127'.
Found and cleaned up 1 empty switch in `$paramod\Porownywanie\BITS=32.$proc$Porownywanie.sv:6$93'.
Removing empty process `$paramod\Porownywanie\BITS=32.$proc$Porownywanie.sv:6$93'.
Removing empty process `$paramod\Dodawanie\WIDTH=32.$proc$Dodawanie.sv:8$91'.
Found and cleaned up 5 empty switches in `\exe_unit_w48_rtl.$proc$exe_unit_w48.sv:39$81'.
Removing empty process `exe_unit_w48_rtl.$proc$exe_unit_w48.sv:39$81'.
Removing empty process `exe_unit_w48_rtl.$proc$exe_unit_w48.sv:74$89'.
Cleaned up 42 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\konwersja\WIDTH=32.
<suppressed ~3 debug messages>
Optimizing module $paramod\ustawianie\BITS=32.
<suppressed ~2 debug messages>
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module exe_unit_w48_rtl.
<suppressed ~7 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..
Removed 0 unused cells and 153 unused wires.
<suppressed ~6 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module $paramod\Dodawanie\WIDTH=32..
checking module $paramod\Porownywanie\BITS=32..
checking module $paramod\konwersja\WIDTH=32..
checking module $paramod\ustawianie\BITS=32..
checking module exe_unit_w48_rtl..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
Optimizing module $paramod\ustawianie\BITS=32.
Optimizing module exe_unit_w48_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Dodawanie\WIDTH=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Porownywanie\BITS=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\konwersja\WIDTH=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$181: \i_argA -> { 1'0 \i_argA [30:0] }
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$175.
Running muxtree optimizer on module $paramod\ustawianie\BITS=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w48_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 1 multiplexer ports.
<suppressed ~41 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Dodawanie\WIDTH=32.
  Optimizing cells in module $paramod\Porownywanie\BITS=32.
  Optimizing cells in module $paramod\konwersja\WIDTH=32.
    New input vector for $reduce_or cell $reduce_or$konwersja.sv:10$168: { \i_argA [0] \i_argA [1] \i_argA [2] \i_argA [3] \i_argA [4] \i_argA [5] \i_argA [6] \i_argA [7] \i_argA [8] \i_argA [9] \i_argA [10] \i_argA [11] \i_argA [12] \i_argA [13] \i_argA [14] \i_argA [15] \i_argA [16] \i_argA [17] \i_argA [18] \i_argA [19] \i_argA [20] \i_argA [21] \i_argA [22] \i_argA [23] \i_argA [24] \i_argA [25] \i_argA [26] \i_argA [27] \i_argA [28] \i_argA [29] \i_argA [30] }
  Optimizing cells in module $paramod\konwersja\WIDTH=32.
  Optimizing cells in module $paramod\ustawianie\BITS=32.
  Optimizing cells in module \exe_unit_w48_rtl.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
Optimizing module $paramod\ustawianie\BITS=32.
Optimizing module exe_unit_w48_rtl.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Dodawanie\WIDTH=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Porownywanie\BITS=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\konwersja\WIDTH=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ustawianie\BITS=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w48_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~41 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Dodawanie\WIDTH=32.
  Optimizing cells in module $paramod\Porownywanie\BITS=32.
  Optimizing cells in module $paramod\konwersja\WIDTH=32.
  Optimizing cells in module $paramod\ustawianie\BITS=32.
  Optimizing cells in module \exe_unit_w48_rtl.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
Optimizing module $paramod\ustawianie\BITS=32.
Optimizing module exe_unit_w48_rtl.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from wire $paramod\konwersja\WIDTH=32.$reduce_or$konwersja.sv:10$168_Y.
Removed top 31 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$129 ($eq).
Removed top 30 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$131 ($eq).
Removed top 30 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$130 ($eq).
Removed top 29 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$132 ($eq).
Removed top 29 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$133 ($eq).
Removed top 29 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$134 ($eq).
Removed top 29 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$135 ($eq).
Removed top 28 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$136 ($eq).
Removed top 28 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$137 ($eq).
Removed top 28 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$138 ($eq).
Removed top 28 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$139 ($eq).
Removed top 28 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$140 ($eq).
Removed top 28 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$141 ($eq).
Removed top 28 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$142 ($eq).
Removed top 28 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$143 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$144 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$145 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$146 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$147 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$148 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$149 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$150 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$151 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$152 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$153 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$154 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$155 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$156 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$157 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$158 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$eq$ustawianie.sv:14$159 ($eq).
Removed top 27 bits (of 32) from port B of cell $paramod\ustawianie\BITS=32.$gt$ustawianie.sv:21$161 ($gt).
Removed top 1 bits (of 2) from port B of cell exe_unit_w48_rtl.$procmux$303_CMP0 ($eq).
Removed top 31 bits (of 32) from wire exe_unit_w48_rtl.$reduce_xor$exe_unit_w48.sv:67$87_Y.
Removed top 31 bits (of 32) from wire exe_unit_w48_rtl.w_por.

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..
Removed 0 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~588 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\Dodawanie\WIDTH=32:
  creating $macc model for $add$Dodawanie.sv:10$92 ($add).
  creating $alu model for $macc $add$Dodawanie.sv:10$92.
  creating $alu cell for $add$Dodawanie.sv:10$92: $auto$alumacc.cc:474:replace_alu$310
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\Porownywanie\BITS=32:
  creating $alu model for $le$Porownywanie.sv:9$94 ($le): new $alu
  creating $alu cell for $le$Porownywanie.sv:9$94: $auto$alumacc.cc:474:replace_alu$314
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\konwersja\WIDTH=32:
  creating $macc model for $add$konwersja.sv:9$166 ($add).
  creating $alu model for $macc $add$konwersja.sv:9$166.
  creating $alu cell for $add$konwersja.sv:9$166: $auto$alumacc.cc:474:replace_alu$327
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\ustawianie\BITS=32:
  creating $alu model for $gt$ustawianie.sv:21$161 ($gt): new $alu
  creating $alu model for $eq$ustawianie.sv:14$159 ($eq): merged with $gt$ustawianie.sv:21$161.
  creating $alu cell for $gt$ustawianie.sv:21$161, $eq$ustawianie.sv:14$159: $auto$alumacc.cc:474:replace_alu$331
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module exe_unit_w48_rtl:
  created 0 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
Optimizing module $paramod\ustawianie\BITS=32.
<suppressed ~1 debug messages>
Optimizing module exe_unit_w48_rtl.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Dodawanie\WIDTH=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Porownywanie\BITS=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\konwersja\WIDTH=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ustawianie\BITS=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w48_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~41 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Dodawanie\WIDTH=32.
  Optimizing cells in module $paramod\Porownywanie\BITS=32.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$317: { $auto$alumacc.cc:490:replace_alu$315 [0] $auto$alumacc.cc:490:replace_alu$315 [1] $auto$alumacc.cc:490:replace_alu$315 [2] $auto$alumacc.cc:490:replace_alu$315 [3] $auto$alumacc.cc:490:replace_alu$315 [4] $auto$alumacc.cc:490:replace_alu$315 [5] $auto$alumacc.cc:490:replace_alu$315 [6] $auto$alumacc.cc:490:replace_alu$315 [7] $auto$alumacc.cc:490:replace_alu$315 [8] $auto$alumacc.cc:490:replace_alu$315 [9] $auto$alumacc.cc:490:replace_alu$315 [10] $auto$alumacc.cc:490:replace_alu$315 [11] $auto$alumacc.cc:490:replace_alu$315 [12] $auto$alumacc.cc:490:replace_alu$315 [13] $auto$alumacc.cc:490:replace_alu$315 [14] $auto$alumacc.cc:490:replace_alu$315 [15] $auto$alumacc.cc:490:replace_alu$315 [16] $auto$alumacc.cc:490:replace_alu$315 [17] $auto$alumacc.cc:490:replace_alu$315 [18] $auto$alumacc.cc:490:replace_alu$315 [19] $auto$alumacc.cc:490:replace_alu$315 [20] $auto$alumacc.cc:490:replace_alu$315 [21] $auto$alumacc.cc:490:replace_alu$315 [22] $auto$alumacc.cc:490:replace_alu$315 [23] $auto$alumacc.cc:490:replace_alu$315 [24] $auto$alumacc.cc:490:replace_alu$315 [25] $auto$alumacc.cc:490:replace_alu$315 [26] $auto$alumacc.cc:490:replace_alu$315 [27] $auto$alumacc.cc:490:replace_alu$315 [28] $auto$alumacc.cc:490:replace_alu$315 [29] $auto$alumacc.cc:490:replace_alu$315 [30] $auto$alumacc.cc:490:replace_alu$315 [31] }
  Optimizing cells in module $paramod\Porownywanie\BITS=32.
  Optimizing cells in module $paramod\konwersja\WIDTH=32.
  Optimizing cells in module $paramod\ustawianie\BITS=32.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$336: { $auto$alumacc.cc:490:replace_alu$332 [0] $auto$alumacc.cc:490:replace_alu$332 [1] $auto$alumacc.cc:490:replace_alu$332 [2] $auto$alumacc.cc:490:replace_alu$332 [3] $auto$alumacc.cc:490:replace_alu$332 [4] $auto$alumacc.cc:490:replace_alu$332 [5] $auto$alumacc.cc:490:replace_alu$332 [6] $auto$alumacc.cc:490:replace_alu$332 [7] $auto$alumacc.cc:490:replace_alu$332 [8] $auto$alumacc.cc:490:replace_alu$332 [9] $auto$alumacc.cc:490:replace_alu$332 [10] $auto$alumacc.cc:490:replace_alu$332 [11] $auto$alumacc.cc:490:replace_alu$332 [12] $auto$alumacc.cc:490:replace_alu$332 [13] $auto$alumacc.cc:490:replace_alu$332 [14] $auto$alumacc.cc:490:replace_alu$332 [15] $auto$alumacc.cc:490:replace_alu$332 [16] $auto$alumacc.cc:490:replace_alu$332 [17] $auto$alumacc.cc:490:replace_alu$332 [18] $auto$alumacc.cc:490:replace_alu$332 [19] $auto$alumacc.cc:490:replace_alu$332 [20] $auto$alumacc.cc:490:replace_alu$332 [21] $auto$alumacc.cc:490:replace_alu$332 [22] $auto$alumacc.cc:490:replace_alu$332 [23] $auto$alumacc.cc:490:replace_alu$332 [24] $auto$alumacc.cc:490:replace_alu$332 [25] $auto$alumacc.cc:490:replace_alu$332 [26] $auto$alumacc.cc:490:replace_alu$332 [27] $auto$alumacc.cc:490:replace_alu$332 [28] $auto$alumacc.cc:490:replace_alu$332 [29] $auto$alumacc.cc:490:replace_alu$332 [30] $auto$alumacc.cc:490:replace_alu$332 [31] }
  Optimizing cells in module $paramod\ustawianie\BITS=32.
  Optimizing cells in module \exe_unit_w48_rtl.
Performed a total of 2 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..
Removed 1 unused cells and 4 unused wires.
<suppressed ~3 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
Optimizing module $paramod\ustawianie\BITS=32.
Optimizing module exe_unit_w48_rtl.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Dodawanie\WIDTH=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Porownywanie\BITS=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\konwersja\WIDTH=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ustawianie\BITS=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w48_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~41 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Dodawanie\WIDTH=32.
  Optimizing cells in module $paramod\Porownywanie\BITS=32.
  Optimizing cells in module $paramod\konwersja\WIDTH=32.
  Optimizing cells in module $paramod\ustawianie\BITS=32.
  Optimizing cells in module \exe_unit_w48_rtl.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
Optimizing module $paramod\ustawianie\BITS=32.
Optimizing module exe_unit_w48_rtl.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking exe_unit_w48_rtl.o_status as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
Optimizing module $paramod\ustawianie\BITS=32.
Optimizing module exe_unit_w48_rtl.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
<suppressed ~1 debug messages>
Optimizing module $paramod\konwersja\WIDTH=32.
<suppressed ~3 debug messages>
Optimizing module $paramod\ustawianie\BITS=32.
<suppressed ~33 debug messages>
Optimizing module exe_unit_w48_rtl.
<suppressed ~6 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..
Removed 1 unused cells and 39 unused wires.
<suppressed ~5 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
Optimizing module $paramod\ustawianie\BITS=32.
Optimizing module exe_unit_w48_rtl.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\Dodawanie\WIDTH=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\Porownywanie\BITS=32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\konwersja\WIDTH=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\ustawianie\BITS=32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w48_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\Dodawanie\WIDTH=32.
  Optimizing cells in module $paramod\Porownywanie\BITS=32.
  Optimizing cells in module $paramod\konwersja\WIDTH=32.
  Optimizing cells in module $paramod\ustawianie\BITS=32.
  Optimizing cells in module \exe_unit_w48_rtl.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
Optimizing module $paramod\ustawianie\BITS=32.
Optimizing module exe_unit_w48_rtl.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=33 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu\WIDTH=33 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_xor.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=31\Y_WIDTH=31 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_lcu\WIDTH=31 for cells of type $lcu.
No more expansions possible.
<suppressed ~1297 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
<suppressed ~43 debug messages>
Optimizing module $paramod\Porownywanie\BITS=32.
<suppressed ~34 debug messages>
Optimizing module $paramod\konwersja\WIDTH=32.
<suppressed ~202 debug messages>
Optimizing module $paramod\ustawianie\BITS=32.
<suppressed ~1051 debug messages>
Optimizing module exe_unit_w48_rtl.
<suppressed ~64 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
<suppressed ~78 debug messages>
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
<suppressed ~2739 debug messages>
Finding identical cells in module `\exe_unit_w48_rtl'.
<suppressed ~9 debug messages>
Removed a total of 942 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..
Removed 178 unused cells and 538 unused wires.
<suppressed ~183 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `$paramod\Dodawanie\WIDTH=32' to `<abc-temp-dir>/input.blif'..
Extracted 235 gates and 299 wires to a netlist network with 64 inputs and 33 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        7
ABC RESULTS:            ANDNOT cells:       16
ABC RESULTS:              AOI3 cells:       22
ABC RESULTS:              NAND cells:       30
ABC RESULTS:               NOR cells:        3
ABC RESULTS:               NOT cells:       16
ABC RESULTS:              OAI3 cells:       25
ABC RESULTS:                OR cells:       17
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:              XNOR cells:       20
ABC RESULTS:               XOR cells:       43
ABC RESULTS:        internal signals:      202
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

3.23.2. Extracting gate netlist of module `$paramod\Porownywanie\BITS=32' to `<abc-temp-dir>/input.blif'..
Extracted 194 gates and 258 wires to a netlist network with 64 inputs and 1 outputs.

3.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:              AOI3 cells:       10
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:       17
ABC RESULTS:              OAI3 cells:       21
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:       34
ABC RESULTS:               XOR cells:       32
ABC RESULTS:        internal signals:      193
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:        1
Removing temp directory.

3.23.3. Extracting gate netlist of module `$paramod\konwersja\WIDTH=32' to `<abc-temp-dir>/input.blif'..
Extracted 177 gates and 210 wires to a netlist network with 32 inputs and 32 outputs.

3.23.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:               MUX cells:       30
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:       78
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       29
ABC RESULTS:        internal signals:      146
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       32
Removing temp directory.

3.23.4. Extracting gate netlist of module `$paramod\ustawianie\BITS=32' to `<abc-temp-dir>/input.blif'..
Extracted 294 gates and 359 wires to a netlist network with 64 inputs and 33 outputs.

3.23.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:        2
ABC RESULTS:              AOI3 cells:        1
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:       32
ABC RESULTS:              OAI3 cells:       33
ABC RESULTS:                OR cells:      107
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:        internal signals:      262
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

3.23.5. Extracting gate netlist of module `\exe_unit_w48_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 205 gates and 307 wires to a netlist network with 101 inputs and 35 outputs.

3.23.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.5.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:               MUX cells:       32
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:       66
ABC RESULTS:              OAI4 cells:       32
ABC RESULTS:                OR cells:       27
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:       10
ABC RESULTS:               XOR cells:       21
ABC RESULTS:        internal signals:      171
ABC RESULTS:           input signals:      101
ABC RESULTS:          output signals:       35
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\Dodawanie\WIDTH=32.
Optimizing module $paramod\Porownywanie\BITS=32.
Optimizing module $paramod\konwersja\WIDTH=32.
<suppressed ~30 debug messages>
Optimizing module $paramod\ustawianie\BITS=32.
Optimizing module exe_unit_w48_rtl.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\Dodawanie\WIDTH=32'.
Finding identical cells in module `$paramod\Porownywanie\BITS=32'.
Finding identical cells in module `$paramod\konwersja\WIDTH=32'.
Finding identical cells in module `$paramod\ustawianie\BITS=32'.
Finding identical cells in module `\exe_unit_w48_rtl'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..
Removed 1 unused cells and 865 unused wires.
<suppressed ~7 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \exe_unit_w48_rtl
Used module:     $paramod\Dodawanie\WIDTH=32
Used module:     $paramod\Porownywanie\BITS=32
Used module:     $paramod\konwersja\WIDTH=32
Used module:     $paramod\ustawianie\BITS=32

3.25.2. Analyzing design hierarchy..
Top module:  \exe_unit_w48_rtl
Used module:     $paramod\Dodawanie\WIDTH=32
Used module:     $paramod\Porownywanie\BITS=32
Used module:     $paramod\konwersja\WIDTH=32
Used module:     $paramod\ustawianie\BITS=32
Removed 0 unused modules.

3.26. Printing statistics.

=== $paramod\Dodawanie\WIDTH=32 ===

   Number of wires:                178
   Number of wire bits:            271
   Number of public wires:           4
   Number of public wire bits:      97
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                207
     $_ANDNOT_                      16
     $_AND_                          7
     $_AOI3_                        22
     $_NAND_                        30
     $_NOR_                          3
     $_NOT_                         16
     $_OAI3_                        25
     $_ORNOT_                        8
     $_OR_                          17
     $_XNOR_                        20
     $_XOR_                         43

=== $paramod\Porownywanie\BITS=32 ===

   Number of wires:                129
   Number of wire bits:            191
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                127
     $_ANDNOT_                       2
     $_AND_                          1
     $_AOI3_                        10
     $_NAND_                         6
     $_NOR_                         17
     $_OAI3_                        21
     $_ORNOT_                       34
     $_OR_                           4
     $_XOR_                         32

=== $paramod\konwersja\WIDTH=32 ===

   Number of wires:                116
   Number of wire bits:            178
   Number of public wires:           3
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                145
     $_ANDNOT_                       3
     $_AND_                          1
     $_MUX_                         30
     $_NOR_                          1
     $_ORNOT_                        2
     $_OR_                          78
     $_XNOR_                         1
     $_XOR_                         29

=== $paramod\ustawianie\BITS=32 ===

   Number of wires:                158
   Number of wire bits:            282
   Number of public wires:           5
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                186
     $_ANDNOT_                       2
     $_AND_                          1
     $_AOI3_                         1
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                         32
     $_OAI3_                        33
     $_ORNOT_                        6
     $_OR_                         107

=== exe_unit_w48_rtl ===

   Number of wires:                183
   Number of wire bits:            404
   Number of public wires:          19
   Number of public wire bits:     240
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                238
     $_ANDNOT_                       6
     $_DFF_PP0_                     35
     $_MUX_                         32
     $_NAND_                         1
     $_NOR_                          2
     $_NOT_                         66
     $_OAI4_                        32
     $_ORNOT_                        2
     $_OR_                          27
     $_XNOR_                        10
     $_XOR_                         21
     $paramod\Dodawanie\WIDTH=32      1
     $paramod\Porownywanie\BITS=32      1
     $paramod\konwersja\WIDTH=32      1
     $paramod\ustawianie\BITS=32      1

=== design hierarchy ===

   exe_unit_w48_rtl                  1
     $paramod\Dodawanie\WIDTH=32      1
     $paramod\Porownywanie\BITS=32      1
     $paramod\konwersja\WIDTH=32      1
     $paramod\ustawianie\BITS=32      1

   Number of wires:                764
   Number of wire bits:           1326
   Number of public wires:          34
   Number of public wire bits:     596
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                899
     $_ANDNOT_                      29
     $_AND_                         10
     $_AOI3_                        33
     $_DFF_PP0_                     35
     $_MUX_                         62
     $_NAND_                        39
     $_NOR_                         25
     $_NOT_                        114
     $_OAI3_                        79
     $_OAI4_                        32
     $_ORNOT_                       52
     $_OR_                         233
     $_XNOR_                        31
     $_XOR_                        125

3.27. Executing CHECK pass (checking for obvious problems).
checking module $paramod\Dodawanie\WIDTH=32..
checking module $paramod\Porownywanie\BITS=32..
checking module $paramod\konwersja\WIDTH=32..
checking module $paramod\ustawianie\BITS=32..
checking module exe_unit_w48_rtl..
found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `$paramod\Dodawanie\WIDTH=32' to `<abc-temp-dir>/input.blif'..
Extracted 207 gates and 271 wires to a netlist network with 64 inputs and 33 outputs.

4.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       64
ABC RESULTS:                OR cells:       48
ABC RESULTS:               XOR cells:       63
ABC RESULTS:        internal signals:      174
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

4.2. Extracting gate netlist of module `$paramod\Porownywanie\BITS=32' to `<abc-temp-dir>/input.blif'..
Extracted 127 gates and 191 wires to a netlist network with 64 inputs and 1 outputs.

4.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       87
ABC RESULTS:               NOT cells:       45
ABC RESULTS:                OR cells:       69
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      126
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:        1
Removing temp directory.

4.3. Extracting gate netlist of module `$paramod\konwersja\WIDTH=32' to `<abc-temp-dir>/input.blif'..
Extracted 145 gates and 177 wires to a netlist network with 32 inputs and 32 outputs.

4.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       32
ABC RESULTS:               BUF cells:        1
ABC RESULTS:               NOT cells:        3
ABC RESULTS:                OR cells:       47
ABC RESULTS:               XOR cells:       29
ABC RESULTS:        internal signals:      113
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       32
Removing temp directory.

4.4. Extracting gate netlist of module `$paramod\ustawianie\BITS=32' to `<abc-temp-dir>/input.blif'..
Extracted 186 gates and 250 wires to a netlist network with 64 inputs and 33 outputs.

4.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       64
ABC RESULTS:               NOT cells:       11
ABC RESULTS:                OR cells:       56
ABC RESULTS:        internal signals:      153
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       33
Removing temp directory.

4.5. Extracting gate netlist of module `\exe_unit_w48_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 199 gates and 300 wires to a netlist network with 101 inputs and 35 outputs.

4.5.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      123
ABC RESULTS:               NOT cells:       68
ABC RESULTS:                OR cells:       77
ABC RESULTS:               XOR cells:       31
ABC RESULTS:        internal signals:      164
ABC RESULTS:           input signals:      101
ABC RESULTS:          output signals:       35
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\Dodawanie\WIDTH=32..
Finding unused cells or wires in module $paramod\Porownywanie\BITS=32..
Finding unused cells or wires in module $paramod\konwersja\WIDTH=32..
Finding unused cells or wires in module $paramod\ustawianie\BITS=32..
Finding unused cells or wires in module \exe_unit_w48_rtl..
Removed 0 unused cells and 1189 unused wires.
<suppressed ~5 debug messages>

6. Executing Verilog backend.
Dumping module `$paramod\Dodawanie\WIDTH=32'.
Dumping module `$paramod\Porownywanie\BITS=32'.
Dumping module `$paramod\konwersja\WIDTH=32'.
Dumping module `$paramod\ustawianie\BITS=32'.
Dumping module `\exe_unit_w48_rtl'.

7. Printing statistics.
